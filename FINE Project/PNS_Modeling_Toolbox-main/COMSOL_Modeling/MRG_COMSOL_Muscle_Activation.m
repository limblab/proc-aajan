% Using this file, we can see what axons are being stimulated by a given set
% of input currents, as defined by the voltage fields that COMSOL generates

%Keep currents between 0-3mA 
%and PW 0-250us 

%Note that each base voltage field is generated by an initial current of
%1mA in the associated contact

%this helps keep functions where they should be is all
addpath('./COMSOL modeling/');
addpath('../');

fiberD = 10; %um, only diameters of 4um to 16/14um
tStep = 5; % in us
passive = 0; % If '1', Passive components only - no gate behavior
time_in_US = 3*10^3; % 3 ms simulation time, in us

%note that, as the function below is coded, the csv file must be in that
%folder relative to the root folder. Specifically: "\COMSOL modeling\106Specific\NW File\"
VextMatrix = zeros(114,221,10);
for i = 1:10
    %This function applies the COMSOL voltages to the axons in a form that
    %the MRG model can read appropriately given the fiber diameter (see
    %function for many details)
    [VTemp, axonXPositions, axonYPositions] = external_voltage_interpolated_for_diameter(sprintf("NW_Contact%iV.csv", i), 0.00636104, fiberD);
    VextMatrix(:,:,i) = VTemp;
end    

%voltages linearly superimpose from currents and the base field is for ~1mA
%A vector that has the values of how many mA are being put in each contact
contactWeights = [0.1 0 0 0 0 0 0 0.2 0 0];

% Loop which incorporates each contact current into the final voltage field
% that an axon is experiencing
Vext = contactWeights(1).*VextMatrix(:,:,1);
for i = 2:length(contactWeights)
    Vext = Vext + contactWeights(i).*VextMatrix(:,:,i);
end

axons = size(Vext,1); %the function must know how many axons are being given beforehand

%a required struct for the MRG function below
StimData.PAfunc = @Matlab_MRG_Stimulus_Function_Example;

%this factor of 1000 is inserted because the voltage data is in V, but the
%function uses mV
StimData.PAfuncArgs = {-1000 25 1000}; % PA of '1', 25us PW, start at 1 ms.
%setting the field to be applied for the given time
StimData.Vext{1} = Vext';

tic
[AP,Vm,NA_Store,NA_H_Store,NA_M3_Store,K_Store,NAP_Store,VUPPERStore] =  Matlab_MRG_2019(axons,time_in_US,fiberD,tStep,passive,StimData);
toc

%% Graphing section

figure(1);

%making a 3d array that shows a single axon through time into a 2d array
%that can be graphed
%by changing this 1 to any number between 1 and axons (114), we can look at
%different axons
tempV = reshape(Vm(:,43,:), [221, size(Vm,3)]);
s = surf(tempV);
s.EdgeColor = 'none';
title 'Single Contact single axon'
xlabel 'time(AU)'
ylabel 'node'
zlabel 'voltage(mV)'

f2 = figure(2);
hold on;

%This provides an overlay for the data so we can see fascicle borders
I = imread(pwd+"\COMSOL modeling\106Specific\"+"MatlabSizedUlnar.png"); 
imagesc([3.8e-3 10.9e-3],[0.475e-3 -2.2e-3],I); 

%This just resizes and positions the figure so it makes more sense with the
%geometry of the nerve to a person
 f2.Position =  [500 200 1300 520];


for i = (1:axons)
    if (AP(i)>0)
        scatter(axonXPositions(i), axonYPositions(i), 20,'red' );
    else
        scatter(axonXPositions(i), axonYPositions(i), 20,'blue' );
    end
end

hold off
title 'Axon Positions and Firing'
%making the overlay look nicer
xlim([3.8e-3 10.9e-3]);
ylim([-2.2e-3 0.475e-3]);



%%
%These manually placed muscle groups are one fascicle each. This array of
%structs is of the form: Muscle X Axon Indicies Associated With Each Muscle
mmGroups(1).axons  = [(1:6), (12:16), (23:27)];
mmGroups(2).axons  = [(7:11), (17:22)];
mmGroups(3).axons  = [(28:43), (54:64), (75:80)];
mmGroups(4).axons  = [(44:53), (65:74), (81:87)];
mmGroups(5).axons  = (88:91);
mmGroups(6).axons  = (92:103);
mmGroups(7).axons  = (104:114);

%This function gives an array that gives the percentage activation of each
%pre-defined muscle group
[ percentageMmActivation ] = MRG_COMSOL_Arbitrary_Muscle_Function( AP, mmGroups  );

